/*
This tests verifies that the first reaction is not executed for a second time until the second reaction
has finished. This is ensure by a backwards going precedence port.
*/
target Chisel {
    timeout: 2 nsec
};

reactor Test {
    timer t1 (0, 1 nsec)
    timer t2 (0, 1 nsec)
    timer t3 (0, 1 nsec)

    state cnt: {=UInt(8.W)=}

    reaction(t1) {=
        printf("One\n")
        assert(lf_read(cnt) === 0.U)
        lf_write(cnt, 1.U)
    =}

    reaction(t2) {=
        printf("Two\n")
        reactionDone := false.B
        assert(lf_read(cnt) === 1.U)
        val cntDown = RegInit(10.U)
        cntDown := cntDown - 1.U
        when (cntDown === 0.U) {
            lf_write(cnt, 3.U)
            reactionDone := true.B
        }
    =}
    reaction(t3) {=
        printf("Three\n")
        reactionDone := false.B
        assert(lf_read(cnt) === 3.U)
        val cntDown = RegInit(10.U)
        cntDown := cntDown - 1.U
        when (cntDown === 0.U) {
            lf_write(cnt, 0.U)
            reactionDone := true.B
        }
    =}
}



main reactor {
    m = new Test()
}