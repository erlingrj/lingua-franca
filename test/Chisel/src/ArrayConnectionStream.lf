target Chisel {
    timeout: 1 usec
}

reactor Source {
    @array(length=128)
    output out: {=UInt(8.W)=}

    timer t(0, 200 nsec)

    reaction(t) -> out {=
        val writePort = lf_set_array(out, 64.U, 64.U)
        val writeData = VecInit(Seq.tabulate(64)(i => i.U))
        val cnt = RegInit(0.U(8.W))

        writePort.valid := true.B
        writePort.bits.data := writeData(cnt)

        when(writePort.fire) {
            cnt := cnt + 1.U
        }

        reactionDone := cnt === 63.U && writePort.fire
    =}
}

reactor Sink {
    @array(length=128)
    input in: {=UInt(8.W)=}

    reaction(in) {=
        printf("Triggered @ %d\n", lf_time_logical())
        val r = lf_get_array(in, 0.U, 128.U)
        val expData = VecInit(Seq.tabulate(128)(i => {
            if (i < 64) 0.U else (i-64).U
        }))
        val cnt = RegInit(0.U(8.W))

        r.ready := true.B
        when(r.fire) {
            assert(r.bits.data === expData(cnt))
            cnt := cnt + 1.U
        }

        reactionDone := cnt === 127.U && r.fire
    =}
}

main reactor {
    src = new Source()
    sink = new Sink()

    src.out -> sink.in
}