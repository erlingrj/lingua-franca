target Chisel {
    timeout: 10 usec
};


reactor Source {
    @array(length=8)
    output out: {=UInt(8.W)=}

    reaction(startup) -> out {=
        val regCnt = RegInit(0.U(7.W))
        val writePort = lf_set_array(out, 0.U, 8.U)

        writePort.valid := true.B
        writePort.bits.data := regCnt

        when(writePort.fire) {
            regCnt := regCnt + 1.U
        }

        reactionDone := regCnt === 7.U && writePort.fire
    =}
}

reactor Sink {
    @array(length=8)
    input in: {=UInt(8.W)=}

    reaction(in) {=
        val regCnt = RegInit(0.U(4.W))
        val readPort = lf_get_array(in, 0.U, 8.U)

        readPort.ready := true.B
        when (readPort.fire) {
            assert(readPort.bits.data === regCnt)
            regCnt := regCnt + 1.U
        }
        reactionDone := regCnt === 7.U && readPort.fire
    =}
}

main reactor {
    src = new Source()
    sink = new Sink()
    src.out -> sink.in
}