target Chisel {
    timeout: 1 usec
}

reactor Source {
    @array(length=4)
    output out: {=UInt(8.W)=}

    reaction(startup) -> out {=
        val writePort = lf_set_array(out, 0.U, 1.U)

        writePort.valid := true.B
        writePort.bits.data := 42.U

        reactionDone := writePort.fire
    =}
}

reactor Sink {
    @array(length=4)
    input in: {=UInt(8.W)=}

    state recv :{=UInt(8.W)=}

    reaction(in) {=
        printf("Triggered @ %d\n", lf_time_logical())
        val r = lf_get_array(in, 0.U, 1.U)
        r.ready := true.B
        when(r.fire) {
            lf_write(recv, r.bits.data)
        }

        reactionDone := r.fire
    =}

    reaction(shutdown) {=
        printf("Shutdown @ %d\n", lf_time_logical())
        assert(lf_read(recv) === 42.U)
    =}
}

main reactor {
    src = new Source()
    sink = new Sink()

    src.out -> sink.in
}