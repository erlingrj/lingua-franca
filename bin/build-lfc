#!/bin/bash

#==========================================================
# Description: 	        Build the lfc compiler.
# Authors:		Marten Lohstroh, Mehrdad Niknami
# Usage:		build-lfc [options]
#==========================================================

set -euo pipefail

# Report fatal error.
function fatal_error() {
    1>&2 echo -e "\e[1mbuild-lfc: \e[31mfatal error: \e[0m$1"
}

if [[ $(type -p javac) != "" ]]; then
    #echo found java executable in PATH
    _javac=javac
elif [[ -n "$JAVA_HOME" ]] && [[ -x "$JAVA_HOME/bin/javac" ]];  then
    #echo found java executable in JAVA_HOME     
    _javac="$JAVA_HOME/bin/javac"
else
    fatal_error "JDK not found."
    exit 1
fi

if [[ "$_javac" ]]; then
    semantic_version=$("$_javac" -version 2>&1 | awk '{print $2}')
    javac_version=$(echo "$semantic_version" | awk -F. '{printf("%03d%03d",$1,$2);}')
    #echo $_javac
    #echo version "$semantic_version"
    #echo version "$javac_version"
    if [ $javac_version -lt 001008 ]; then
        fatal_error "JDK $semantic_version found but 1.8 or greater is required."     
        exit 1
    fi
fi

# Print message explaining the CLI args.
function usage() {
    echo "Usage: build-lfc [options]"
    echo "Options:"
    echo "  -c | --clean          Build entirely from scratch."
    echo "  -h | --help           Display this information."
    echo "  -o | --offline        Use cached libraries."
    echo "  -s | --stacktrace     Provide stacktrace of build errors."
}

flags=" ";
clean=0;

while [[ "$#" -gt 0 ]]; do 
    case $1 in
        -o | --offline ) 
            flags=$flags"--offline "
        ;;
        -s | --stacktrace ) 
            flags=$flags"--stacktrace "
        ;;
        -c | --clean )
        clean=1
        ;;
        *) 
            usage
            exit 1
        ;;
    esac
    shift
done

FIND=find
if [ "${OSTYPE}" = "msys" ]; then  # Make sure we don't use the built-in Windows 'find' command, which is different
	FIND="/usr/bin/${FIND}"
fi

base=""
if [ ! "$0" = "${0##*/*}" ]; then  # Do we have a parent directory?
	base="${0%/*}/"
fi
base="${base}../"
lfbase="${base}org.lflang/"
jarpath="${lfbase}build/libs/org.lflang-1.0.0-SNAPSHOT-all.jar"

if [ $clean -eq 1 ]; then
    echo "Performing cleanup."
    "${base}gradlew" -p "${base}" clean;
fi

if [ ! -f "${jarpath}" ] || ! "${FIND}" "${lfbase}src" -path "${lfbase}src/test" -prune -o -type f -newer "${jarpath}" -exec false {} +; then  # Check if jar is missing or out-of-date relative to source files
	1>&2 echo "Jar file is missing or out-of-date; running Gradle..."
	"${base}gradlew" ${flags} -p "${base}" generateStandaloneCompiler
	touch -c -- "${jarpath}"  # Ensure the file timestamp is up-to-date even if the file didn't need to be updated
else
    echo "Already up-to-date."
fi
