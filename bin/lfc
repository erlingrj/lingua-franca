#!/bin/bash

#==========================================================
# Description: 	    Run the lfc compiler.
# Authors:          Marten Lohstroh
# Usage:            Usage: lfc [options] files...
#==========================================================

set -euo pipefail
base=""
if [ ! "$0" = "${0##*/*}" ]; then  # Do we have a parent directory?
	base="${0%/*}/"
fi
base="${base}../"
lfbase="${base}org.lflang/"
jarpath="${lfbase}build/libs/org.lflang-1.0.0-SNAPSHOT-all.jar"

# Report fatal error.
function fatal_error() {
    1>&2 echo -e "\e[1mlfc: \e[31mfatal error: \e[0m$1"
}

pushd () {
    command pushd "$@" > /dev/null
}

popd () {
    command popd "$@" > /dev/null
}

# Build first if no jar exists.
if [[ ! -f "$jarpath" ]]; then
    pushd "$base"
    ./gradlew generateStandaloneCompiler
    popd
fi

if [[ $(type -p java) != "" ]]; then
    #echo found java executable in PATH
    _java=java
elif [[ -n "$JAVA_HOME" ]] && [[ -x "$JAVA_HOME/bin/java" ]];  then
    #echo found java executable in JAVA_HOME     
    _java="$JAVA_HOME/bin/java"
else
    fatal_error "JRE not found."
    error_exit
fi

if [[ "$_java" ]]; then
    semantic_version=$("$_java" -version 2>&1 | awk -F '"' '/version/ {print $2}')
    java_version=$(echo "$semantic_version" | awk -F. '{printf("%03d%03d",$1,$2);}')
    #echo version "$semantic_version"
    #echo version "$java_version"
    if [ $java_version -lt 011000 ]; then
        fatal_error "JRE $semantic_version found but 1.11 or greater is required."     
        error_exit
    fi
fi

"${_java}" -jar "${jarpath}" "$@";
exit $?
